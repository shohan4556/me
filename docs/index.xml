<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello ! on Hello !</title>
    <link>https://shohan4556.github.io/me/</link>
    <description>Recent content in Hello ! on Hello !</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017 Shohan</copyright>
    <lastBuildDate>Sat, 09 Nov 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/me/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to use Scriptable Object like PlayerPrefs</title>
      <link>https://shohan4556.github.io/me/post/how-to-use-so-as-playerpref/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/how-to-use-so-as-playerpref/</guid>
      <description>&lt;p&gt;What is the purpose of scriptable object ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Saving and storing data during an Editor session (not in game mode)&lt;/p&gt;

&lt;p&gt;Saving data as an Asset in your Project to use at run time (like class)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;so the basic idea is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. parse the scritable object as JSON data
2. save them in PlayerPrefs as string 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is a script I used one of my project :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using Random = UnityEngine.Random;

/// &amp;lt;summary&amp;gt;
/// Author : Shohanur Rahaman 
/// &amp;lt;/summary&amp;gt;
[CreateAssetMenu(fileName = &amp;quot;wave info&amp;quot;, menuName = &amp;quot;Zombie/Wave&amp;quot;, order = 1)]
public class WaveInfo_SO : ScriptableObject {
    
    [TextArea]
    public string name;
    public string saveKey;
   
    [Header(&amp;quot;Zombie Properties&amp;quot;)]
    public int totalWave = 1;
    public int zombiePerWave = 1;
    public int waveInterval = 2;
    public GameObject[] zombiePrefab;
    
    private void OnValidate(){
        if (saveKey.Equals(&amp;quot;&amp;quot;)) {
            saveKey = name;
        }
    }

    public GameObject GetZombie(){
        GameObject z = zombiePrefab[Random.Range(0, zombiePrefab.Length)];
        return z;
    }

    public void UpdateWaves(){
        totalWave -= 1;
    }

    public int GetWaveCount(){
        return totalWave;
    }

    private void OnEnable(){

            // get data 
            JsonUtility.FromJsonOverwrite(PlayerPrefs.GetString(saveKey), this);
            EditorJsonUtility.FromJsonOverwrite(PlayerPrefs.GetString(saveKey), this);
            Debug.Log(&amp;quot;overwrite data&amp;quot;);
        
    }

    private void OnDisable(){
        // save data 
            if (saveKey.Equals(&amp;quot;&amp;quot;)) 
                saveKey = this.name;
            
            string jsonData = JsonUtility.ToJson(this, true);
            //Debug.Log(jsonData);
            PlayerPrefs.SetString(saveKey, jsonData);
            PlayerPrefs.Save();
        
    }
}     
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neon Gunslinger : 2 Player Game</title>
      <link>https://shohan4556.github.io/me/project/neon_gunslinger/</link>
      <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/project/neon_gunslinger/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OTaQMjS.png&#34; alt=&#34;View&#34; /&gt;
Duel Gunslinger is a fast paced duel shooting game. You need at least two players to play the game.Duel gunslinger have two gameplay mode, gunslinger and quick draw. Each game-mode will give you a unique thrill. Duels gunslinger will tests your accuracy, timing and speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to play :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gunslinger :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✋ A player stands on each side of the device&lt;/p&gt;

&lt;p&gt;✋ Each player have 4 bullets&lt;/p&gt;

&lt;p&gt;✋ Once the game starts, one player shoot the other player&lt;/p&gt;

&lt;p&gt;✋ Player can shoot by tapping the button of their side&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tips : Focus on timing and speed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mgUZHWX.png&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Draw :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✋ Each player have one bullet&lt;/p&gt;

&lt;p&gt;✋ Each player get 5 seconds to shoot&lt;/p&gt;

&lt;p&gt;✋ One bullet, 5 seconds, One kill&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tips : wait for your chance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/IPzSfLY.png&#34; alt=&#34;View&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/Cun3QOO.png&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.shohan.neongunslinger&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Boom Swipe : Arcade Game</title>
      <link>https://shohan4556.github.io/me/project/boom-swipe/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/project/boom-swipe/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YBRB0Gk.png&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Used Tech : Unity3D&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2HQbSKULinQ&#34; target=&#34;_blank&#34;&gt;View Trailer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.b2mgames.boomswipe&#34; target=&#34;_blank&#34;&gt;Download from Google Play Store&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How To Setup Git with Google Drive, Dropbox, Onedrive</title>
      <link>https://shohan4556.github.io/me/post/how_to_setup_git_with_gdrive/</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/how_to_setup_git_with_gdrive/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;step - 01 :&lt;/strong&gt; Install google drive, dropbox on your local PC and enable sync.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;step - 02 :&lt;/strong&gt; install and configure git on your PC.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;step - 03 :&lt;/strong&gt; create a folder on google-drive and open &lt;code&gt;git-bash&lt;/code&gt; there&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;step - 04 :&lt;/strong&gt; write git command &lt;code&gt;git init --bare&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;step - 05 :&lt;/strong&gt; Initialize a git repo outside of google-drive&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;step - 06:&lt;/strong&gt; now connect google drive repo with your the repo that you just created outside of google drive.
&lt;code&gt;git remote add origin &amp;quot;/C/Users/JoeUser/Google Drive/git/project1.git&amp;quot;&lt;/code&gt; (note if the url does not have any space then remove double quote)
to check if the remote added &lt;code&gt;git remote -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;step - 07 :&lt;/strong&gt; If remote added without any error then push your local changes &lt;code&gt;git push -u origin master&lt;/code&gt;
And you done. now you can make changes and push your local changes to google-drive repo.
If you want to clone that repo then simply &lt;code&gt;git clone &amp;quot;/C/Users/JoeUser/Google Drive/git/project1.git&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=T2aJP5MOxug&#34; target=&#34;_blank&#34;&gt;video tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on
&lt;a href=&#34;https://github.com/shohan4556/&#34; target=&#34;_blank&#34;&gt;Githab&lt;/a&gt;|
&lt;a href=&#34;https://twitter.com/shohan4556/&#34; target=&#34;_blank&#34;&gt;Twitter&lt;/a&gt;|
&lt;a href=&#34;https://facebook.com/shohan4556/&#34; target=&#34;_blank&#34;&gt;Facebook&lt;/a&gt;|
&lt;a href=&#34;https://www.quora.com/profile/Shohanur-Rahaman&#34; target=&#34;_blank&#34;&gt;Quora&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;© copyright reserved by the Author.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Duel Gunslinger : 2 Player Game</title>
      <link>https://shohan4556.github.io/me/project/duel_gunslinger/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/project/duel_gunslinger/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iJkv4yY.png&#34; alt=&#34;View&#34; /&gt;
Duel Gunslinger is a fast paced duel shooting game. You need at least two players to play the game.Duel gunslinger have two gameplay mode, gunslinger and quick draw. Each game-mode will give you a unique thrill. Duels gunslinger will tests your accuracy, timing and speed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to play :&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gunslinger :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✋ A player stands on each side of the device&lt;/p&gt;

&lt;p&gt;✋ Each player have 4 bullets&lt;/p&gt;

&lt;p&gt;✋ Once the game starts, one player shoot the other player&lt;/p&gt;

&lt;p&gt;✋ Player can shoot by tapping the button of their side&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tips : Focus on timing and speed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Draw :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✋ Each player have one bullet&lt;/p&gt;

&lt;p&gt;✋ Each player get 5 seconds to shoot&lt;/p&gt;

&lt;p&gt;✋ One bullet, 5 seconds, One kill&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tips : wait for your chance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XVG4fWD.png&#34; alt=&#34;View&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/AmMbhte.png&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B07MP2G6Y5&#34; target=&#34;_blank&#34;&gt;Play the game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cinematic Cut Scenes</title>
      <link>https://shohan4556.github.io/me/project/rpg_cutscenes/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/project/rpg_cutscenes/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://i3.ytimg.com/vi/_HWDSbN2RTg/maxresdefault.jpg&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Used Tech : Cinemachine, Yarn Spinner.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_HWDSbN2RTg&#34; target=&#34;_blank&#34;&gt;View Project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RPG Dialogue System</title>
      <link>https://shohan4556.github.io/me/project/rpg_dialogue_system/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/project/rpg_dialogue_system/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://i3.ytimg.com/vi/SsZ85rwn6yg/maxresdefault.jpg&#34; alt=&#34;View&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Used Tech : Cinemachine, Yarn Spinner.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SsZ85rwn6yg&#34; target=&#34;_blank&#34;&gt;View Project&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Object Oriented C# - (Polymorphism, Interface &amp; Abstract Class</title>
      <link>https://shohan4556.github.io/me/post/oo-c-sharp-2/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/oo-c-sharp-2/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;In this post I will discuss about&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Polymorphism&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Interface&lt;/li&gt;
&lt;li&gt;Abstract Class&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Polymorphism =Poly + morphism = Multiple + forms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3Bf7vcg.jpg&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Polymorphism can be achieved by method overriding and also by virtual method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ What is method overriding ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Method overriding means changing the implementation of an Inherited method.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If a declare a method as virtual in the base class, we can override it in a derived class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Shape
{
public virtual Draw()
{
// Default implementation for all derived classes
}
}

public class Circle : Shape
{
public override Draw()
{
// Changed implementation
}
}
public class Rectangle : Shape
{
public override Draw()
{
// change implementation
}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ Interface is type of which is contain property, method that has no implementation. An interface is simply a declaration of the capabilities (or services) that a class should provide.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Naming convention of interface name starts with a Capital I&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No implementation&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;An interface can only declare methods and properties, but not fields (because fields are about implementation detail).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;No access modifier (private, public)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
public interface ITaxCalculator 
{
// int Tax; 
int Tax {get; set;}
int calculate(); // no implementation and no access modifier 
}

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why use Interface ?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ Flexibility in implementation&lt;/p&gt;

&lt;p&gt;→ Interfaces are better suited to situations in which your applications require many possibly unrelated object types to provide certain functionality.&lt;/p&gt;

&lt;p&gt;→ you can use multiple implementation of a same Interface.&lt;/p&gt;

&lt;p&gt;→ Interfaces help building loosely coupled applications. We reduce the coupling between
two classes by putting an interface between them. This way, if one of these classes
changes, it will have no impact on the class that is dependent on that (as long as the
interface is kept the same)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Benefit of using Interface&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ we can use interface to change our application behaviour by extending its code, rather than changing existing code.&lt;/p&gt;

&lt;p&gt;→ Different implementation of that interface at runtime (kind of polymorphism)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Interfaces and Inheritance&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ One of the common misconceptions about interfaces is that they are used to
implement multiple inheritance in C#. This is fundamentally wrong, yet many books
and videos make such a false claim.&lt;/p&gt;

&lt;p&gt;→  With inheritance, we write code once and reuse it without the need to type all that
code again.&lt;/p&gt;

&lt;p&gt;→  With interfaces, we simply declare the methods and properties the implementing class should contain. Then we need to type all that declaration along with the actual implementation in that class. So, code is not inherited, even the declaration of the members!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Abstract Class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Abstract modifier states that a class or a member &lt;strong&gt;misses implementation&lt;/strong&gt;. We use abstract members when it doesn’t make sense to implement them in a base class. When a class member is declared as abstract, that class needs to be declared as abstract as well. That means that class is not complete. In derived classes, we must need to override (implement) the abstract members in the base class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class Shape
{
    int area;
    
    // define behavior, implement this for everybody
    int GetArea()
    {
        return this.area;
    }
    
// That can be very different, force them to provide their own implementation.
  public abstract void Draw(); 
}

public class Circle : Shape
{
  public override void Draw()
  {
    // implementation for circle 
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;It is impossible to define Shape because the concept of shape is abstract (hide the essential details, shows only the features or in other word the outside view).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Difference Between Interface and Abstract Class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Interface&lt;/strong&gt; is a contract: The person writing the interface says, &amp;ldquo;hey, I accept things looking that way&amp;rdquo;, and the person using the interface says &amp;ldquo;OK, the class I write looks that way&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;An interface is an empty shell. There are only the signatures of the methods, which implies that the methods do not have a body. The interface can&amp;rsquo;t do anything. It&amp;rsquo;s just a pattern.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Abstract classes&lt;/strong&gt; look a lot like interfaces, but they have something more, &lt;strong&gt;You can define a behavior for them&lt;/strong&gt;. It&amp;rsquo;s more about a person saying, &amp;ldquo;these classes should look like that, and they have that in common, so fill in the blanks!&amp;rdquo;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Oriented C# - Class, Inheritance, Composition</title>
      <link>https://shohan4556.github.io/me/post/oo-c-sharp-1/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/oo-c-sharp-1/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Today we will learn the OOP concept of C#.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Class&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Composition&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Class&lt;/strong&gt;
&lt;img src=&#34;https://i.imgur.com/1jdDF53.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Class is a template or blueprint of an object, it contain variables and method (behaviour). Class encapsulate date (stored in field and behaviour). Object is an instance of a class. Class don&amp;rsquo;t allocate memory, object does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Constructor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A constructor is a method that is called when an instance of a class is created.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We use constructors to put an object in an early state.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;As a best practice, define a constructor only when an object “needs” to be initialised or it won’t be able to do its job.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Constructors do not have a return type, not even void, and they should have the exact same name as the class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Car {
  
public string Color;
public string manufacturer;

// constructor
public Car(string _color, string _manufacturer){
Color = _color;
manufacturer = _manufacturer;
}

public void Drive(){
// car can drive
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;→ A property is a kind of class member that is used for providing access to fields of a class&lt;/p&gt;

&lt;p&gt;→ A property encapsulates a get and a set method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Car {
  
  private string _color;
  public string Manufacturer { get; set; }
   
  public string Color
  {
    get{ return _color; }
    set { _color = value; }
  }

  public void Drive(){
    // car can drive
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zmzABEd.jpg&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;p&gt;→ A kind of relationship between two classes that allows one to inherit code from the other class.&lt;/p&gt;

&lt;p&gt;→ Is-A relationship.&lt;/p&gt;

&lt;p&gt;→ Code reusability is the major benifit of using Inheritance.&lt;/p&gt;

&lt;p&gt;→ Example :  A car is a vehicle. (parent class vehicle, child class car).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Public class Vehicle{
    // share common attribute 
}

Public class speedBoat : Vehicle{
    // code specific to speedBoat
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Composition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/p07mUw0.png&#34; alt=&#34;Imgur&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gold fish dont walk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;→ Composition is just like Inheritance, another kind of relationship between two classes that allows one to contain other.&lt;/p&gt;

&lt;p&gt;→ Has-a relationship&lt;/p&gt;

&lt;p&gt;→ Example : Car/Speedboat has an engine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Car{
   public string name;
// has an engine 
}

public class SpeedBoat{
  
  private Engine engine;
  
// constructor
  public speedBoat(Engine _engine){
    engine = _engine;
  }

  public void Drive(){
    engine.StartEngine(); // from Engine class 
    Console.WriteLine(&amp;quot;Driving speed boat&amp;quot;);
  }
}


public class Engine(){
  public void StartEngine(){
      Console.WriteLine(&amp;quot;Engine Started&amp;quot;);
  }
}

 // form main class
  SpeedBoat myboat = new SpeedBoat(new Engine()); // composition
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Problems with inheritance&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Easily abused by amateur designers / developers&lt;/p&gt;

&lt;p&gt;• Leads to large complex/large hierarchies&lt;/p&gt;

&lt;p&gt;• Such hierarchies are very fragile and a change may affect many classes&lt;/p&gt;

&lt;p&gt;• Results in tight coupling&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Benefits of composition&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;• Flexible&lt;/p&gt;

&lt;p&gt;• Leads to loose coupling&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Having said all that, it doesn’t mean inheritance should be avoided at all times. In fact,
it’s great to use inheritance when dealing with very stable classes on top of small
hierarchies. As the hierarchy grows (or variations of classes increase), the hierarchy,
however, becomes fragile. And that’s where composition can give you a better design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Pirate Dev Log - 01</title>
      <link>https://shohan4556.github.io/me/post/project-pirate-dev-log-1/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/project-pirate-dev-log-1/</guid>
      <description>&lt;p&gt;So far I have created a nice and smooth third person camera with unity &lt;strong&gt;cinemachine&lt;/strong&gt; .
This camera support collision as well. I have also created another third person camera. I am just testing multiple things which one fit well. Btw here is the demo of the &lt;strong&gt;cinemachine&lt;/strong&gt; camera. (&lt;em&gt;little glitch for recording&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://youtu.be/QFdgjGiLhpE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/QFdgjGiLhpE/0.jpg&#34; alt=&#34;Foo&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inheritable Singleton Pattern</title>
      <link>https://shohan4556.github.io/me/post/inheritable-singleton-script/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/inheritable-singleton-script/</guid>
      <description>

&lt;p&gt;সিঙ্গেলেটন একটা পরিচিত এবং জনপ্রিয় ডিজাইন প্যাটার্ন। অনেক সময় মাল্টিপল স্ক্রিপ্ট সিঙ্গেলেটন করতে হয়। একই জিনিস বার লেখা ঝামেলা সেজন্য inheritable singleton script ব্যাবহার করা যেতে পারে।
নিচে আমার নিজের লেখা একটি ইনহেরিটেবল স্ক্রিপ্ট। এই স্ক্রিপ্ট বার বার একই জিনিস লেখার ঝামেলা বাঁচাবে। যদি ছোট প্রোজেক্ট হয় তাহলে কাজে লাগবে না কারন ছোট খাটো প্রোজেক্টে অত বেশি সিঙ্গেলেটন দরকার হয় না সাধারণত।&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SingletonBase&amp;lt;T&amp;gt; : MonoBehaviour where T : MonoBehaviour {
 
    private static object slock = new object(); safety 
    private static T sInstance; 

    public static T Instance
    {
        get {
            lock (slock) {
                if(sInstance == null) {
                    sInstance = GameObject.FindObjectOfType&amp;lt;T&amp;gt;(); 
                    if(sInstance == null) {
                        UnityEngine.Debug.LogError(&amp;quot;Expected to find an instance of the &amp;quot; + typeof(T) + &amp;quot; component in the hierarchy but none found!\n&amp;quot;
                                     + &amp;quot;Attach the &amp;quot; + typeof(T) + &amp;quot; component to a GameObject in the hierarchy.&amp;quot;);

                        Abort();
                    }
                    // got the instance
                    DontDestroyOnLoad(sInstance.transform.gameObject);
                }
                return sInstance;
            }
        }
    }

    private static void Abort() {
        #if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
        #endif
    }

    private void Awake() {
        if(Instance != this) {
            Destroy(this.gameObject);
            return;
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;little-explanation&#34;&gt;Little explanation :&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;slock  একটা অবজেক্ট ক্রিয়েট করি ।&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Lock ( ….) { }&lt;/code&gt; প্রথমে একটি থ্রেড এই ব্লকে ঢুকবে এবং লক করে ফেলবে অন্য কোন থ্রেড কে এখানে ঢুকতে দিবে না যতক্ষণ না এর কাজ শেষ হয়। খাটি বাংলায় এই হচ্ছে মূল কথা । কাজ শেষ হলে slock অবজেক্ট কে রিলিজ করে দিবে অর্থাৎ কাজ শেষ।&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;প্রথমে ট্রাই করবো এরকম স্ক্রিপ্ট আরও আছে কিনা খোঁজার যদি না পাই তাহলে একটা এরর মেসেজ দিবো ।
আর যদি পাই তাহলে তো ভালো।&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;ক-ভ-ব-ইনহ-র-ট-করত-হব&#34;&gt;কিভাবে ইনহেরিট করতে হবে ?&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
public class UIManager : SingletonBase&amp;lt;UIManager&amp;gt; {

    [SerializeField] private MainMenu mainMenu;
    [SerializeField] private Camera demoCamera;
 
    private void Update() {
        if (Input.GetKeyDown(KeyCode.Space)) {
            Debug.Log(&amp;quot;fadeout UI manager&amp;quot;);
            mainMenu.FadeOut();
        }
    }

    public void setDemoCameraActive(bool flag) {
        demoCamera.gameObject.SetActive(flag);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;রেফারেন্স ঃ&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/572263/A-Reusable-Base-Class-for-the-Singleton-Pattern-in&#34; target=&#34;_blank&#34;&gt;https://www.codeproject.com/Articles/572263/A-Reusable-Base-Class-for-the-Singleton-Pattern-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yoda.arachsys.com/csharp/singleton.html&#34; target=&#34;_blank&#34;&gt;http://www.yoda.arachsys.com/csharp/singleton.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.unity3d.com/index.php/Singleton&#34; target=&#34;_blank&#34;&gt;http://wiki.unity3d.com/index.php/Singleton&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genetic Algorithm with Machine Learning</title>
      <link>https://shohan4556.github.io/me/project/genetic-algo/</link>
      <pubDate>Sun, 25 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/project/genetic-algo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Genetic Algorithm With Machine Learning</title>
      <link>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LJs99AY.png&#34; alt=&#34;Natural Selection&#34; /&gt;&lt;/p&gt;

&lt;p&gt;আমি একটা মেশিন লার্নিং সিমুলেশন করি যেখানে Natural Selection বিষয়টা ছোট আকারে সিমুলেট করি।&lt;/p&gt;

&lt;p&gt;এখানে DNA factor গুলো হচ্ছে r,g,b color and scale. প্রথমে randomly rgb value এবং scale এর পপুলেশন জেনারেট করি।  পপুলেশন সাইয হচ্ছে ১০ এবং জেনারেশন টাইম হচ্ছে ১০ সেকেন্ড। ১০ সেকেন্ড পর একটা জেনারেশন এর সব পপুলেশন ডেড হয়ে যাবে এবং এই পপুলেশনএর DNA data গুলো পরবর্তী পপুলেশনে  ইনহেরিট করবে। এখানে সেই ডাটাগুলোর priority level বেশি থাকবে যারা বেশি সময় ধরে সারভাইভ করতে পেরেছে (অর্থাৎ সবার শেষে সেটা ডেড)।  এই ডাটা গুলোরও পরবর্তীতে প্রজন্মে ইনহেরিট করার সম্ভাবনা ৫০% এবং মিউটেশন হচ্ছে  ০.১০% (বেশি মিউটেশন হলে আসল কালার টা হারিয়ে যেতে পারে তাই কম দিয়েছি)।&lt;/p&gt;

&lt;p&gt;এই &lt;a href=&#34;https://streamable.com/og91d&#34; target=&#34;_blank&#34;&gt;ভিডিও&lt;/a&gt; ক্লিপে দেখুন আমি রেড কালার টা সব শেষে remove করি নবম জেনারেশনেই আমি লাল এর আর একটা শেড পাই মিউটেশন এর কারনে। যেহেতু পপুলেশন সাইজ ছোট তাই খুব অল্প সময়েই রেজাল্ট দেখা যাচ্ছে।&lt;/p&gt;

&lt;p&gt;এবার এই &lt;a href=&#34;https://streamable.com/0frnu&#34; target=&#34;_blank&#34;&gt;ক্লিপে&lt;/a&gt; দেখুন এখানে পুরো সিমুলেশনটা অটোমেটেড, কোন সেলেক্টিভ পিকিং হয় নাই। পুরোটাই randomly selection। এখানে পপুলেশন সাইজ ২৫। ৪০তম জেনারেশনে গিয়ে নীল রঙের একটা শেড পাওয়া যাচ্ছে।&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shohan4556/Genetic-Algorithm-With-Machine-Learning&#34; target=&#34;_blank&#34;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>মোটিভেশন, খেয়ে দে !</title>
      <link>https://shohan4556.github.io/me/post/motivation-comic/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/motivation-comic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ডিজিটাল ওয়ার্ল্ড - গেমিং কনফারেন্সের  ২০১৭</title>
      <link>https://shohan4556.github.io/me/post/digital-world-gaming-conf-2017/</link>
      <pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/digital-world-gaming-conf-2017/</guid>
      <description>&lt;p&gt;কি-নোটে​ ​প্রথমেই​ ​যে​ ​বিষয়টা​ ​চলে​ ​আসছে​ ​“passion”​ ​যেটাই​ ​করেন​ ​না​ ​কেন​ ​ভালবাসা​ ​থাকতে​ ​হবে।​ ​আজকে​ ​ওয়েব​ ​ডেভ
করলাম​ ​কাল​ ​ফ্রিলান্সিং​ ​করলাম​ ​পরশু​ ​গেমডেভ​ ​করলাম,​ ​এরকম​ ​নয়।​ ​ভালবাসা​ ​থাকতে​ ​হবে।​ &lt;strong&gt;​“আমি​ ​কি​ ​পারবো”,”​ ​আমি
পারি​ ​না​ ​&amp;hellip;”​&lt;/strong&gt; ​এই​ ​বাক্য​ ​গুলো​ ​প্যাশনের​ ​সম্পূর্ণ​ ​বিপরীত।&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ফিক্সড​ ​মাইন্ডসেট​ ​নয়​ ​গ্রোথ​ ​মাইন্ডসেট​ ​থাকতে​ ​হবে।​&lt;/strong&gt; ​​গ্রোথ​ ​মাইন্ডসেট​ ​বিষয়​ ​টা​ ​যদি​ ​সহজ​ ​ভাষায়​ ​বলি​ ​তাহলে
এরকম​ ​আপনি​ ​যদি​ ​আপনার​ ​গোল​ ​ঠিক​ ​করে​ ​ফেলেন​ ​আপনি​ ​এবং​ ​সেভাবে​ ​স্টেপ​ ​বাই​ ​স্টেপ​ ​কাজ​ ​করতে​ ​থাকেন,​ ​প্র্যাকটিস
করতে​ ​থাকেন​ ​তাহলে​ ​আপনার​ ​নিউরাল​ ​গ্রোথও​ ​একই​ ​সাথে​ ​হতে​ ​থাকবে।​ ​এটার​ ​সাথে​ ​রিলেটেড​ ​হচ্ছে
&lt;strong&gt;Grit&lt;/strong&gt;(perseverance​ ​and​ ​passion​ ​for​ ​long-term​ ​goals)।​ ​আপনি​ ​এখন​ ​ফেইলর​ ​হতে​ ​পারেন​ ​কিন্তু​ ​এটা​ ​সাময়িক,
সাময়িক​ ​ফেইলর​ ​আপনার​ ​লংটার্ম​ ​গোল​ ​থেকে​ ​বিচ্যুত​ ​করতে​ ​পারবে​ ​না। একটা​ ​বইয়ে​ ​কথাও​ ​মনে​ ​পড়তেছে​ ​এই​ ​মুহূর্তে​ ​-​ ​​&lt;em&gt;Grit:​ ​The​ ​Power​ ​of​ ​Passion​ ​and​ ​Perseverance&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ten​ ​thousand​ ​hour​ ​rule​ ​:&lt;/strong&gt;​ ​আপনি​ ​কোন​ ​একটা​ ​বিষয়ে​ ​দশ​ ​হাজার​ ​ঘণ্টা​ ​সময়​ ​দিন​ ​সত্যিকার​ ​অর্থেই​ ​আপনি​ ​ঐ​ ​বিষয়ে
একজন​ ​এক্সপার্ট​ ​হয়ে​ ​যাবে।​ ​Talent​ ​+​ ​effort​ ​=​ ​skill​ ​+​ ​effort​ ​=​ ​achievement.&lt;/p&gt;

&lt;p&gt;মাশা ভাইের স্পিচে, যে বিষয় গুলো আসছে গেম ডেভেলপমেন্টের বিভিন্ন সেক্টর, গেম ডিজাইন থেকে গেম মার্কেটিং। গেম মার্কেটিং এ তিনি জিরো বাজেট মার্কেটিং এর কথা বলছেন। indie game developer রা এমনিতেই অভাবে থাকে এখন যদি গেম মার্কেটিং এ যদি টাকা খরচ করে ফেলে তাহলেই হইছে কাজ। &lt;em&gt;(মাশা ভাই মুক্তি ক্যাম্পের একটা টিশার্ট পড়ে আসছিল এটাও মার্কেটিংের অংশ )&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ইন্ডি গেম ডেভেলপার দের জন্য টুইটার আর রেডিট খুব কাজের ব্যক্তিগত অভিজ্ঞতা । জিরো বাজেট মার্কেটিং এর জন্য এই ভিডিও টা দেখা যেতে পারে খুব কাজের। &lt;a href=&#34;https://www.youtube.com/watch?v=SkEQtMP2CuA&#34; target=&#34;_blank&#34;&gt;Marketing Indie Games on a $0 Budget&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agility​ ​:​&lt;/strong&gt; ​​ ​আপনার​ ​যেকোনো​ ​চেঞ্জ​ ​adapt​ ​করার​ ​ক্ষমতা​ ​থাকতে​ ​হবে।​ ​আপনার​ ​গেমের​ ​কোন​ ​একটা​ ​মেকানিজম​ ​আপনার
কাছে​ ​ভালো​ ​মনে​ ​হলেও​ ​প্লেয়ারদের​ ​এটা​ ​ভালো​ ​লাগে​ ​নাই,​ ​আপনাকে​ ​চেঞ্জ​ ​করতে​ ​হবে।​ ​আপনার​ ​গেম​ ​রিলিজের​ ​শেষ​ ​মুহূর্তে
গিয়েও​ ​কোন​ ​চেঞ্জ​ ​করতে​ ​হতে​ ​পারে।&lt;/p&gt;

&lt;p&gt;কিছু প্রশ্ন ছিল, গেম ডিজাইনার হিসেবে কিভাবে ক্যারিয়ার বা কিভাবে শেখা যায়, মাশা ভাইয়ের সাজেশন ছিল বিভিন্ন বই এবং extracredit এর গেম ডিজাইন এর ভিডিও গুলো। আর একটা প্রশ্নের কথা মনে পড়তেছে, কিভাবে ম্যাসিভ অডিয়েন্স পাওয়া যায়, এখানে অনেক গুলো সাজেশন ছিল, যেমন বাংলাদেশ বা সাউথ এশিয়ান রিজিওন কে টার্গেট করে গেম বানানো যেতে পার, লোকালাইজেশন করে বিভিন্ন রিজিওনাল সাইটে গেম পাবলিশ করা যেতে পারে অথবা আউট অফ বক্স কোন আইডিয়া নিয়ে গেম ডেভেলপ করা যেতে পারে।&lt;/p&gt;

&lt;p&gt;&lt;em&gt;এই লেখাটা স্মৃতি থেকে লেখা, অনেক পয়েন্ট বাদ পড়ে গেছে আবার নতুন পয়েন্ট নিজের মত করে অ্যাড করে দিয়েছি।&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
