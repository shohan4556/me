<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Sharp on Hello !</title>
    <link>https://shohan4556.github.io/me/tags/c-sharp/</link>
    <description>Recent content in C Sharp on Hello !</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017 Shohan</copyright>
    <lastBuildDate>Sat, 24 Feb 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/me/tags/c-sharp/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Genetic Algorithm With Machine Learning</title>
      <link>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LJs99AY.png&#34; alt=&#34;Natural Selection&#34; /&gt;&lt;/p&gt;

&lt;p&gt;আমি একটা মেশিন লার্নিং সিমুলেশন করি যেখানে Natural Selection বিষয়টা ছোট আকারে সিমুলেট করি।&lt;/p&gt;

&lt;p&gt;এখানে DNA factor গুলো হচ্ছে r,g,b color and scale. প্রথমে randomly rgb value এবং scale এর পপুলেশন জেনারেট করি।  পপুলেশন সাইয হচ্ছে ১০ এবং জেনারেশন টাইম হচ্ছে ১০ সেকেন্ড। ১০ সেকেন্ড পর একটা জেনারেশন এর সব পপুলেশন ডেড হয়ে যাবে এবং এই পপুলেশনএর DNA data গুলো পরবর্তী পপুলেশনে  ইনহেরিট করবে। এখানে সেই ডাটাগুলোর priority level বেশি থাকবে যারা বেশি সময় ধরে সারভাইভ করতে পেরেছে (অর্থাৎ সবার শেষে সেটা ডেড)।  এই ডাটা গুলোরও পরবর্তীতে প্রজন্মে ইনহেরিট করার সম্ভাবনা ৫০% এবং মিউটেশন হচ্ছে  ০.১০% (বেশি মিউটেশন হলে আসল কালার টা হারিয়ে যেতে পারে তাই কম দিয়েছি)।&lt;/p&gt;

&lt;p&gt;এই &lt;a href=&#34;https://streamable.com/og91d&#34; target=&#34;_blank&#34;&gt;ভিডিও&lt;/a&gt; ক্লিপে দেখুন আমি রেড কালার টা সব শেষে remove করি নবম জেনারেশনেই আমি লাল এর আর একটা শেড পাই মিউটেশন এর কারনে। যেহেতু পপুলেশন সাইজ ছোট তাই খুব অল্প সময়েই রেজাল্ট দেখা যাচ্ছে।&lt;/p&gt;

&lt;p&gt;এবার এই &lt;a href=&#34;https://streamable.com/0frnu&#34; target=&#34;_blank&#34;&gt;ক্লিপে&lt;/a&gt; দেখুন এখানে পুরো সিমুলেশনটা অটোমেটেড, কোন সেলেক্টিভ পিকিং হয় নাই। পুরোটাই randomly selection। এখানে পপুলেশন সাইজ ২৫। ৪০তম জেনারেশনে গিয়ে নীল রঙের একটা শেড পাওয়া যাচ্ছে।&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/shohan4556/Genetic-Algorithm-With-Machine-Learning&#34; target=&#34;_blank&#34;&gt;source code&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game AI - Finite State Machine</title>
      <link>https://shohan4556.github.io/me/post/game-ai-fsm/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/game-ai-fsm/</guid>
      <description>&lt;p&gt;Hello there, I have posted a tutorial series about Finite State Machine with Unity3D. FSM is very easy to implement and very effective is some cases.&lt;/p&gt;

&lt;p&gt;Here is the tutorial series.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dDQEFSk-rQM&amp;amp;list=PLWnE_CWJ15J7ajZQ8gKwed8rnetI0SdfN&#34; title=&#34;FSM with Unity3D Intro&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://i.imgur.com/Hp2oLiw.png&#34; alt=&#34;FSM with Unity3D Intro&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unity Tips - 01</title>
      <link>https://shohan4556.github.io/me/post/unity-tips-1/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/unity-tips-1/</guid>
      <description>&lt;p&gt;Hello there, I am going to write a short post about Unity Editor tips that will boost up your workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slider&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Range(1, 100)]
public int weight;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will come up with a slider in inspector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OnValidate()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you may want to validate value that comes from inspector. Unity has a nice method &lt;code&gt;onValidate&lt;/code&gt; you can validate value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public float speed;

void onValidate()
{
    if(speed&amp;lt;=0){
        Debug.LogError(&amp;quot;Hey speed should be greater than 0&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ToolTip&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you may have deliver your project to dumb client, ToolTip can make your life easier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Tooltip(&amp;quot;drop here the screaming audio from Assets &amp;quot;)]
public AudioClip screamAudio;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HideInInspector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hide public variable form Inspector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[HideInInspector]
public int p = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;RequireComponent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use it for dependency script. Make your life easier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[RequireComponent(typeof(Rigidbody))]
public class PlayerScript : MonoBehaviour
{
    Rigidbody rBody;

    void Start()
    {
        rBody = GetComponent&amp;lt;Rigidbody&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intermediate C# - Generic Class</title>
      <link>https://shohan4556.github.io/me/post/generic-class/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/generic-class/</guid>
      <description>&lt;p&gt;Generic class same as typical class in C# except Generic type. So what the f**k is generic type ? Generic type means it is not specified any particular &lt;strong&gt;type&lt;/strong&gt;.
Let&amp;rsquo;s see an example of an ordinary class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyOrdinaryClass{
    // properties and methods goes here
}

var myObj1 = new MyOrdinaryClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what we did here, we have instantiated an object &lt;strong&gt;myObj1&lt;/strong&gt; type of &lt;strong&gt;MyOrdinaryClass&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of generic class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyGenericClass &amp;lt;T&amp;gt; {
    // properties and methods goes here, no special same as ordinary class 
}

   var myObj2 = new MyGenericClass&amp;lt;int&amp;gt; ();
   var myObj3 = new MyGenericClass&amp;lt;string&amp;gt; ();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There must be a &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; after the name of generic class, this is how you have to define generic class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at this example, we have instantiate the same class but &lt;strong&gt;with different type (integer and string)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So In simple term Generic class allow you to write class that can work
with any data type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common use of generic class is &lt;strong&gt;List&lt;/strong&gt;
Here is another example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var obj1 = new MyGenericClass&amp;lt;int&amp;gt; ();
 var obj2 = new MyGenericClass&amp;lt;string&amp;gt; ();

 var Gobj1  = new List&amp;lt;string&amp;gt; ();
 var Gobj2 = new List&amp;lt;int&amp;gt; ();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sample program to follow :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    namespace GenericClass {

    class MyGenericClass &amp;lt;T&amp;gt; {
        public void sayHello ( ) {
            Console.WriteLine (&amp;quot;Hello World&amp;quot;);
        }
    }


    class Program {
        static void Main ( string[] args ) {

            var myObj2 = new MyGenericClass&amp;lt;int&amp;gt; ();
            var myObj3 = new MyGenericClass&amp;lt;string&amp;gt; ();

            myObj2.sayHello ();
            myObj3.sayHello ();

            var obj1 = new MyGenericClass&amp;lt;int&amp;gt; ();
            var obj2 = new MyGenericClass&amp;lt;string&amp;gt; ();

            var Gobj1  = new List&amp;lt;string&amp;gt; ();
            var Gobj2 = new List&amp;lt;int&amp;gt; ();


            Console.ReadKey ();

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Advantages of using Generic Class :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1. Reusing same class multiple times 

    2. Performance 

    3. Type Safety 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
