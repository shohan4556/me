<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Sharp on Hello !</title>
    <link>https://shohan4556.github.io/me/tags/c-sharp/</link>
    <description>Recent content in C Sharp on Hello !</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017 Shohan</copyright>
    <lastBuildDate>Sat, 09 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shohan4556.github.io/me/tags/c-sharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to save ScriptableObject data</title>
      <link>https://shohan4556.github.io/me/post/how-to-use-so-as-playerpref/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/how-to-use-so-as-playerpref/</guid>
      <description>What is the purpose of scriptable object ?
 Saving and storing data during an Editor session (not in game mode)
Saving data as an Asset in your Project to use at run time (like class)
 so the basic idea is
1. parse the scritable object as JSON data 2. save them in PlayerPrefs as string  Here is a script I used one of my project :
using System; using System.</description>
    </item>
    
    <item>
      <title>Object Oriented C# - (Polymorphism, Interface &amp; Abstract Class</title>
      <link>https://shohan4556.github.io/me/post/oo-c-sharp-2/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/oo-c-sharp-2/</guid>
      <description>Overview In this post I will discuss about
 Polymorphism
 Interface Abstract Class  Polymorphism
 Polymorphism =Poly + morphism = Multiple + forms.
 Polymorphism can be achieved by method overriding and also by virtual method
→ What is method overriding ?
 Method overriding means changing the implementation of an Inherited method.
 If a declare a method as virtual in the base class, we can override it in a derived class.</description>
    </item>
    
    <item>
      <title>Object Oriented C# - Class, Inheritance, Composition</title>
      <link>https://shohan4556.github.io/me/post/oo-c-sharp-1/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/oo-c-sharp-1/</guid>
      <description>Overview Today we will learn the OOP concept of C#.
 Class
 Inheritance Composition  Class Class is a template or blueprint of an object, it contain variables and method (behaviour). Class encapsulate date (stored in field and behaviour). Object is an instance of a class. Class don&amp;rsquo;t allocate memory, object does.
Constructor
A constructor is a method that is called when an instance of a class is created.</description>
    </item>
    
    <item>
      <title>Inheritable Singleton Pattern</title>
      <link>https://shohan4556.github.io/me/post/inheritable-singleton-script/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/inheritable-singleton-script/</guid>
      <description>সিঙ্গেলেটন একটা পরিচিত এবং জনপ্রিয় ডিজাইন প্যাটার্ন। অনেক সময় মাল্টিপল স্ক্রিপ্ট সিঙ্গেলেটন করতে হয়। একই জিনিস বার লেখা ঝামেলা সেজন্য inheritable singleton script ব্যাবহার করা যেতে পারে। নিচে আমার নিজের লেখা একটি ইনহেরিটেবল স্ক্রিপ্ট। এই স্ক্রিপ্ট বার বার একই জিনিস লেখার ঝামেলা বাঁচাবে। যদি ছোট প্রোজেক্ট হয় তাহলে কাজে লাগবে না কারন ছোট খাটো প্রোজেক্টে অত বেশি সিঙ্গেলেটন দরকার হয় না সাধারণত।
using System.Collections; using System.Collections.Generic; using UnityEngine; public class SingletonBase&amp;lt;T&amp;gt; : MonoBehaviour where T : MonoBehaviour { private static object slock = new object(); safety private static T sInstance; public static T Instance { get { lock (slock) { if(sInstance == null) { sInstance = GameObject.</description>
    </item>
    
    <item>
      <title>Genetic Algorithm With Machine Learning</title>
      <link>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</guid>
      <description>আমি একটা মেশিন লার্নিং সিমুলেশন করি যেখানে Natural Selection বিষয়টা ছোট আকারে সিমুলেট করি।
এখানে DNA factor গুলো হচ্ছে r,g,b color and scale. প্রথমে randomly rgb value এবং scale এর পপুলেশন জেনারেট করি। পপুলেশন সাইয হচ্ছে ১০ এবং জেনারেশন টাইম হচ্ছে ১০ সেকেন্ড। ১০ সেকেন্ড পর একটা জেনারেশন এর সব পপুলেশন ডেড হয়ে যাবে এবং এই পপুলেশনএর DNA data গুলো পরবর্তী পপুলেশনে ইনহেরিট করবে। এখানে সেই ডাটাগুলোর priority level বেশি থাকবে যারা বেশি সময় ধরে সারভাইভ করতে পেরেছে (অর্থাৎ সবার শেষে সেটা ডেড)। এই ডাটা গুলোরও পরবর্তীতে প্রজন্মে ইনহেরিট করার সম্ভাবনা ৫০% এবং মিউটেশন হচ্ছে ০.</description>
    </item>
    
    <item>
      <title>Game AI - Finite State Machine</title>
      <link>https://shohan4556.github.io/me/post/game-ai-fsm/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/game-ai-fsm/</guid>
      <description>Hello there, I have posted a tutorial series about Finite State Machine with Unity3D. FSM is very easy to implement and very effective is some cases.
Here is the tutorial series.

follow me on facebook
follow me on twitter
follow me on github</description>
    </item>
    
    <item>
      <title>Unity Tips - 01</title>
      <link>https://shohan4556.github.io/me/post/unity-tips-1/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/unity-tips-1/</guid>
      <description>Hello there, I am going to write a short post about Unity Editor tips that will boost up your workflow.
Slider
[Range(1, 100)] public int weight;  This code will come up with a slider in inspector.
OnValidate()
Sometimes you may want to validate value that comes from inspector. Unity has a nice method onValidate you can validate value.
public float speed; void onValidate() { if(speed&amp;lt;=0){ Debug.LogError(&amp;quot;Hey speed should be greater than 0&amp;quot;); } }  ToolTip</description>
    </item>
    
    <item>
      <title>Intermediate C# - Generic Class</title>
      <link>https://shohan4556.github.io/me/post/generic-class/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/generic-class/</guid>
      <description>Generic class same as typical class in C# except Generic type. So what the f**k is generic type ? Generic type means it is not specified any particular type. Let&amp;rsquo;s see an example of an ordinary class
class MyOrdinaryClass{ // properties and methods goes here } var myObj1 = new MyOrdinaryClass();  So what we did here, we have instantiated an object myObj1 type of MyOrdinaryClass.
Here is an example of generic class</description>
    </item>
    
  </channel>
</rss>