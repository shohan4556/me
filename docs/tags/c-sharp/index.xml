<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C-Sharp on Hello !</title>
    <link>https://shohan4556.github.io/me/tags/c-sharp/</link>
    <description>Recent content in C-Sharp on Hello !</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017 Shohan</copyright>
    <lastBuildDate>Sat, 09 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shohan4556.github.io/me/tags/c-sharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to save ScriptableObject data</title>
      <link>https://shohan4556.github.io/me/post/how-to-use-so-as-playerpref/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/how-to-use-so-as-playerpref/</guid>
      <description>I will show you a a simple trick, you can convert your SO object as playerpref.</description>
    </item>
    
    <item>
      <title>Object Oriented C# - (Polymorphism, Interface &amp; Abstract Class</title>
      <link>https://shohan4556.github.io/me/post/oo-c-sharp-2/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/oo-c-sharp-2/</guid>
      <description>&lt;p&gt;An &lt;strong&gt;Interface&lt;/strong&gt; is a contract: The person writing the interface says, &amp;ldquo;hey, I accept things looking that way&amp;rdquo;, and the person using the interface says &amp;ldquo;OK, the class I write looks that way&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;An interface is an empty shell. There are only the signatures of the methods, which implies that the methods do not have a body. The interface can&amp;rsquo;t do anything. It&amp;rsquo;s just a pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Abstract classes&lt;/strong&gt; look a lot like interfaces, but they have something more, &lt;strong&gt;You can define a behavior for them&lt;/strong&gt;. It&amp;rsquo;s more about a person saying, &amp;ldquo;these classes should look like that, and they have that in common, so fill in the blanks!&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Oriented C# - Class, Inheritance, Composition</title>
      <link>https://shohan4556.github.io/me/post/oo-c-sharp-1/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/oo-c-sharp-1/</guid>
      <description>Having said all that, it doesn’t mean inheritance should be avoided at all times. In fact,
it’s great to use inheritance when dealing with very stable classes on top of small
hierarchies. As the hierarchy grows (or variations of classes increase), the hierarchy,
however, becomes fragile. And that’s where composition can give you a better design.</description>
    </item>
    
    <item>
      <title>Inheritable Singleton Pattern</title>
      <link>https://shohan4556.github.io/me/post/inheritable-singleton-script/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/inheritable-singleton-script/</guid>
      <description>সিঙ্গেলেটন একটা পরিচিত এবং জনপ্রিয় ডিজাইন প্যাটার্ন। অনেক সময় মাল্টিপল স্ক্রিপ্ট সিঙ্গেলেটন করতে হয়। একই জিনিস বার লেখা ঝামেলা সেজন্য inheritable singleton script ব্যাবহার করা যেতে পারে।</description>
    </item>
    
    <item>
      <title>Genetic Algorithm With Machine Learning</title>
      <link>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/genetic-algo-with-machine-learning/</guid>
      <description>এখানে DNA factor গুলো হচ্ছে r,g,b color and scale. প্রথমে randomly rgb value এবং scale এর পপুলেশন জেনারেট করি।  পপুলেশন সাইয হচ্ছে ১০ এবং &amp;hellip;</description>
    </item>
    
    <item>
      <title>Game AI - Finite State Machine</title>
      <link>https://shohan4556.github.io/me/post/game-ai-fsm/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/game-ai-fsm/</guid>
      <description>How to implement a simple and effective Finite State Machine with Unity3D</description>
    </item>
    
    <item>
      <title>Unity Tips - 01</title>
      <link>https://shohan4556.github.io/me/post/unity-tips-1/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/unity-tips-1/</guid>
      <description>Simple and easy to use Unity tips that will help to write code more smoothly.</description>
    </item>
    
    <item>
      <title>Intermediate C# - Generic Class</title>
      <link>https://shohan4556.github.io/me/post/generic-class/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/generic-class/</guid>
      <description>Generic class same as typical class in C# except Generic type. So what the f**k is generic type ? Generic type means it is not</description>
    </item>
    
  </channel>
</rss>