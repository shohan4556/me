<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Hello !</title>
    <link>https://shohan4556.github.io/me/tags/coding/</link>
    <description>Recent content in Coding on Hello !</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017 Shohan</copyright>
    <lastBuildDate>Tue, 01 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shohan4556.github.io/me/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inheritable Singleton Pattern</title>
      <link>https://shohan4556.github.io/me/post/inheritable-singleton-script/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/inheritable-singleton-script/</guid>
      <description>সিঙ্গেলেটন একটা পরিচিত এবং জনপ্রিয় ডিজাইন প্যাটার্ন। অনেক সময় মাল্টিপল স্ক্রিপ্ট সিঙ্গেলেটন করতে হয়। একই জিনিস বার লেখা ঝামেলা সেজন্য inheritable singleton script ব্যাবহার করা যেতে পারে। নিচে আমার নিজের লেখা একটি ইনহেরিটেবল স্ক্রিপ্ট। এই স্ক্রিপ্ট বার বার একই জিনিস লেখার ঝামেলা বাঁচাবে। যদি ছোট প্রোজেক্ট হয় তাহলে কাজে লাগবে না কারন ছোট খাটো প্রোজেক্টে অত বেশি সিঙ্গেলেটন দরকার হয় না সাধারণত।
using System.Collections; using System.Collections.Generic; using UnityEngine; public class SingletonBase&amp;lt;T&amp;gt; : MonoBehaviour where T : MonoBehaviour { private static object slock = new object(); safety private static T sInstance; public static T Instance { get { lock (slock) { if(sInstance == null) { sInstance = GameObject.</description>
    </item>
    
    <item>
      <title>আমার Unity3D সেটআপ</title>
      <link>https://shohan4556.github.io/me/post/my-setup-in-unity3d/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/my-setup-in-unity3d/</guid>
      <description>ইউনিটি সেটআপ দেয়ার পর আমি প্রথম যে কাজ টা করি &amp;hellip; প্রথমেই ভিসুয়াল স্টুডিও কোড ইন্সটল করি। মনডেভেলপ এর চেয়ে VSCode ই অনেক বেশি ফ্রেন্ডলি মনে হয় আমার কাছে। তারপর কিছু প্লাগিন ইন্সটল করি। প্লাগিন গুলার লিস্ট
 Beautify C# (for C# support) Debugger for Unity3D Unity Snippets Unity Tools material Icon Theme Trainling Semicolon Markdown All in One  তারপর আমি যেটা করি Menlo ফন্ট ইন্সটল করি। ফন্ট সাইজ রাখি ১৬</description>
    </item>
    
    <item>
      <title>Unity Tips - 01</title>
      <link>https://shohan4556.github.io/me/post/unity-tips-1/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/unity-tips-1/</guid>
      <description>Hello there, I am going to write a short post about Unity Editor tips that will boost up your workflow.
Slider
[Range(1, 100)] public int weight;  This code will come up with a slider in inspector.
OnValidate()
Sometimes you may want to validate value that comes from inspector. Unity has a nice method onValidate you can validate value.
public float speed; void onValidate() { if(speed&amp;lt;=0){ Debug.LogError(&amp;quot;Hey speed should be greater than 0&amp;quot;); } }  ToolTip</description>
    </item>
    
    <item>
      <title>Intermediate C# - Generic Class</title>
      <link>https://shohan4556.github.io/me/post/generic-class/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/generic-class/</guid>
      <description>Generic class same as typical class in C# except Generic type. So what the f**k is generic type ? Generic type means it is not specified any particular type. Let&amp;rsquo;s see an example of an ordinary class
class MyOrdinaryClass{ // properties and methods goes here } var myObj1 = new MyOrdinaryClass();  So what we did here, we have instantiated an object myObj1 type of MyOrdinaryClass.
Here is an example of generic class</description>
    </item>
    
  </channel>
</rss>