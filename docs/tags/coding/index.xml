<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on Hello !</title>
    <link>https://shohan4556.github.io/me/tags/coding/</link>
    <description>Recent content in Coding on Hello !</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017 Shohan</copyright>
    <lastBuildDate>Tue, 01 May 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/me/tags/coding/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Inheritable Singleton Pattern</title>
      <link>https://shohan4556.github.io/me/post/inheritable-singleton-script/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/inheritable-singleton-script/</guid>
      <description>&lt;p&gt;সিঙ্গেলেটন একটা পরিচিত এবং জনপ্রিয় ডিজাইন প্যাটার্ন। অনেক সময় মাল্টিপল স্ক্রিপ্ট সিঙ্গেলেটন করতে হয়। একই জিনিস বার লেখা ঝামেলা সেজন্য inheritable singleton script ব্যাবহার করা যেতে পারে।
নিচে আমার নিজের লেখা একটি ইনহেরিটেবল স্ক্রিপ্ট। এই স্ক্রিপ্ট বার বার একই জিনিস লেখার ঝামেলা বাঁচাবে। যদি ছোট প্রোজেক্ট হয় তাহলে কাজে লাগবে না কারন ছোট খাটো প্রোজেক্টে অত বেশি সিঙ্গেলেটন দরকার হয় না সাধারণত।&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SingletonBase&amp;lt;T&amp;gt; : MonoBehaviour where T : MonoBehaviour {
 
    private static object slock = new object(); safety 
    private static T sInstance; 

    public static T Instance
    {
        get {
            lock (slock) {
                if(sInstance == null) {
                    sInstance = GameObject.FindObjectOfType&amp;lt;T&amp;gt;(); 
                    if(sInstance == null) {
                        UnityEngine.Debug.LogError(&amp;quot;Expected to find an instance of the &amp;quot; + typeof(T) + &amp;quot; component in the hierarchy but none found!\n&amp;quot;
                                     + &amp;quot;Attach the &amp;quot; + typeof(T) + &amp;quot; component to a GameObject in the hierarchy.&amp;quot;);

                        Abort();
                    }
                    // got the instance
                    DontDestroyOnLoad(sInstance.transform.gameObject);
                }
                return sInstance;
            }
        }
    }

    private static void Abort() {
        #if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
        #endif
    }

    private void Awake() {
        if(Instance != this) {
            Destroy(this.gameObject);
            return;
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Little explanation :
slock  একটা অবজেক্ট ক্রিয়েট করি ।
Lock ( ….) { } প্রথমে একটি থ্রেড এই ব্লকে ঢুকবে এবং লক করে ফেলবে অন্য কোন থ্রেড কে এখানে ঢুকতে দিবে না যতক্ষণ না এর কাজ শেষ হয়। খাটি বাংলায় এই হচ্ছে মূল কথা । কাজ শেষ হলে slock অবজেক্ট কে রিলিজ করে দিবে অর্থাৎ কাজ শেষ।
প্রথমে ট্রাই করবো এরকম স্ক্রিপ্ট আরও আছে কিনা খোঁজার যদি না পাই তাহলে একটা এরর মেসেজ দিবো ।
আর যদি পাই তাহলে তো ভালো।&lt;/p&gt;

&lt;p&gt;কিভাবে ইনহেরিট করতে হবে ?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Collections;
using System.Collections.Generic;
using UnityEngine;
public class UIManager : SingletonBase&amp;lt;UIManager&amp;gt; {

    [SerializeField] private MainMenu mainMenu;
    [SerializeField] private Camera demoCamera;
 
    private void Update() {
        if (Input.GetKeyDown(KeyCode.Space)) {
            Debug.Log(&amp;quot;fadeout UI manager&amp;quot;);
            mainMenu.FadeOut();
        }
    }

    public void setDemoCameraActive(bool flag) {
        demoCamera.gameObject.SetActive(flag);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;রেফারেন্স ঃ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/572263/A-Reusable-Base-Class-for-the-Singleton-Pattern-in&#34; target=&#34;_blank&#34;&gt;https://www.codeproject.com/Articles/572263/A-Reusable-Base-Class-for-the-Singleton-Pattern-in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yoda.arachsys.com/csharp/singleton.html&#34; target=&#34;_blank&#34;&gt;http://www.yoda.arachsys.com/csharp/singleton.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.unity3d.com/index.php/Singleton&#34; target=&#34;_blank&#34;&gt;http://wiki.unity3d.com/index.php/Singleton&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>আমার Unity3D সেটআপ</title>
      <link>https://shohan4556.github.io/me/post/my-setup-in-unity3d/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/my-setup-in-unity3d/</guid>
      <description>&lt;p&gt;ইউনিটি সেটআপ দেয়ার পর আমি প্রথম যে কাজ টা করি &amp;hellip;  প্রথমেই ভিসুয়াল স্টুডিও কোড ইন্সটল করি। মনডেভেলপ এর চেয়ে VSCode ই অনেক
বেশি ফ্রেন্ডলি মনে হয় আমার কাছে। তারপর কিছু প্লাগিন ইন্সটল করি।
প্লাগিন গুলার লিস্ট&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beautify&lt;/li&gt;
&lt;li&gt;C# (for C# support)&lt;/li&gt;
&lt;li&gt;Debugger for Unity3D&lt;/li&gt;
&lt;li&gt;Unity Snippets&lt;/li&gt;
&lt;li&gt;Unity Tools&lt;/li&gt;
&lt;li&gt;material Icon Theme&lt;/li&gt;
&lt;li&gt;Trainling Semicolon&lt;/li&gt;
&lt;li&gt;Markdown All in One&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;তারপর আমি যেটা করি &lt;a href=&#34;https://github.com/hbin/top-programming-fonts&#34; target=&#34;_blank&#34;&gt;Menlo&lt;/a&gt; ফন্ট ইন্সটল করি।
ফন্ট সাইজ রাখি ১৬&lt;/p&gt;

&lt;p&gt;এটা আমার ভিএস কোড এর  prefernce file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;workbench.iconTheme&amp;quot;: &amp;quot;material-icon-theme&amp;quot;,
    &amp;quot;window.zoomLevel&amp;quot;: 0,
    &amp;quot;editor.fontSize&amp;quot;: 16,
    &amp;quot;editor.fontFamily&amp;quot;: &amp;quot;Menlo&amp;quot;,
    &amp;quot;material-icon-theme.showUpdateMessage&amp;quot;: false,
    &amp;quot;extensions.ignoreRecommendations&amp;quot;: true,
    &amp;quot;markdown.extension.preview.autoShowPreviewToSide&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ডার্ক থিম ব্যাবহার করি সব সময়।&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EpYOBMrne0s&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/EpYOBMrne0s/0.jpg&#34; alt=&#34;How to configure Visual Studio Code with Unity3D&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;এছাড়াও আরও কিছু প্লাগিন বা থিম মাঝে  মধ্যেই ব্যাবহার করি এই মুহূর্তে মনে পড়ছে না।&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Unity Tips - 01</title>
      <link>https://shohan4556.github.io/me/post/unity-tips-1/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/unity-tips-1/</guid>
      <description>&lt;p&gt;Hello there, I am going to write a short post about Unity Editor tips that will boost up your workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slider&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Range(1, 100)]
public int weight;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will come up with a slider in inspector.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OnValidate()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you may want to validate value that comes from inspector. Unity has a nice method &lt;code&gt;onValidate&lt;/code&gt; you can validate value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public float speed;

void onValidate()
{
    if(speed&amp;lt;=0){
        Debug.LogError(&amp;quot;Hey speed should be greater than 0&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ToolTip&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you may have deliver your project to dumb client, ToolTip can make your life easier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Tooltip(&amp;quot;drop here the screaming audio from Assets &amp;quot;)]
public AudioClip screamAudio;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HideInInspector&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hide public variable form Inspector.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[HideInInspector]
public int p = 5;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;RequireComponent&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use it for dependency script. Make your life easier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[RequireComponent(typeof(Rigidbody))]
public class PlayerScript : MonoBehaviour
{
    Rigidbody rBody;

    void Start()
    {
        rBody = GetComponent&amp;lt;Rigidbody&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Intermediate C# - Generic Class</title>
      <link>https://shohan4556.github.io/me/post/generic-class/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shohan4556.github.io/me/post/generic-class/</guid>
      <description>&lt;p&gt;Generic class same as typical class in C# except Generic type. So what the f**k is generic type ? Generic type means it is not specified any particular &lt;strong&gt;type&lt;/strong&gt;.
Let&amp;rsquo;s see an example of an ordinary class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyOrdinaryClass{
    // properties and methods goes here
}

var myObj1 = new MyOrdinaryClass();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what we did here, we have instantiated an object &lt;strong&gt;myObj1&lt;/strong&gt; type of &lt;strong&gt;MyOrdinaryClass&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of generic class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MyGenericClass &amp;lt;T&amp;gt; {
    // properties and methods goes here, no special same as ordinary class 
}

   var myObj2 = new MyGenericClass&amp;lt;int&amp;gt; ();
   var myObj3 = new MyGenericClass&amp;lt;string&amp;gt; ();
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;There must be a &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; after the name of generic class, this is how you have to define generic class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at this example, we have instantiate the same class but &lt;strong&gt;with different type (integer and string)&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So In simple term Generic class allow you to write class that can work
with any data type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common use of generic class is &lt;strong&gt;List&lt;/strong&gt;
Here is another example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; var obj1 = new MyGenericClass&amp;lt;int&amp;gt; ();
 var obj2 = new MyGenericClass&amp;lt;string&amp;gt; ();

 var Gobj1  = new List&amp;lt;string&amp;gt; ();
 var Gobj2 = new List&amp;lt;int&amp;gt; ();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sample program to follow :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    namespace GenericClass {

    class MyGenericClass &amp;lt;T&amp;gt; {
        public void sayHello ( ) {
            Console.WriteLine (&amp;quot;Hello World&amp;quot;);
        }
    }


    class Program {
        static void Main ( string[] args ) {

            var myObj2 = new MyGenericClass&amp;lt;int&amp;gt; ();
            var myObj3 = new MyGenericClass&amp;lt;string&amp;gt; ();

            myObj2.sayHello ();
            myObj3.sayHello ();

            var obj1 = new MyGenericClass&amp;lt;int&amp;gt; ();
            var obj2 = new MyGenericClass&amp;lt;string&amp;gt; ();

            var Gobj1  = new List&amp;lt;string&amp;gt; ();
            var Gobj2 = new List&amp;lt;int&amp;gt; ();


            Console.ReadKey ();

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Advantages of using Generic Class :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    1. Reusing same class multiple times 

    2. Performance 

    3. Type Safety 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.facebook.com/shohan4556&#34; target=&#34;_blank&#34;&gt;facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.twitter.com/shohan4556&#34; target=&#34;_blank&#34;&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href=&#34;https://www.github.com/shohan4556&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
